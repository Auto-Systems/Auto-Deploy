# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input ApproveNodeRequestInput {
  storage: String!
  network: String!
  host: String!
}

type AuthOutput {
  token: String!
  success: Boolean!
  role: [UserRole!]!
}

type Configuration {
  id: ID!
  createdAt: DateTime!
  controllerHost: String
}

input ConfigurationInput {
  username: String!
  activeControllerId: Int!
}

type Controller {
  id: ID!
  createdAt: DateTime!
  active: Boolean!
  name: String!
}

interface CoreNode {
  name: String!
  id: String!
}

type CoreTemplate {
  id: ID!
  createdAt: DateTime!
  name: String!
  os: NodeOS!
  nodeAuth: NodeAuth!
  itemID: String!
}

input CreateCoreTemplateInput {
  itemID: String!
  name: String!
  os: NodeOS!
  nodeAuth: NodeAuthInput!
}

input CreateLifecycleInput {
  nodeId: String!
  env: [LCENV!]!
  file: String!
}

input CreateNodeInput {
  name: String!
  network: String!
  host: String!
  storage: String!
  coreTemplate: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input ENV {
  key: String!
  value: String!
}

type Host implements CoreNode {
  name: String!
  id: String!
}

input InitialConfigurationInput {
  username: String!
  controllerConnection: String!
  initialControllerGit: String!
  initialProvisionerGit: String!
}

type InitialModule {
  name: String!
  git: String!
}

input LCENV {
  key: String!
  value: String!
}

type Library {
  name: String!
  id: String!
  description: String!
  items(filter: LibraryItemFilter): [LibraryItem!]!
}

type LibraryItem {
  name: String!
  id: String!
  type: LibraryItemType!
  description: String!
}

input LibraryItemFilter {
  name: String
  type: LibraryItemType
}

enum LibraryItemType {
  nodeTemplate
  iso
  file
  templateFile
}

type Lifecycle {
  id: ID!
  createdAt: DateTime!
  node: ManagedNode!
}

input LoginInput {
  username: String!
  password: String!
}

type ManagedNode {
  id: ID!
  createdAt: DateTime!
  name: String!
  coreTemplate: CoreTemplate!

  """Controller's Node ID"""
  node: String!
  helloWorld: String!
}

type Mutation {
  login(input: LoginInput!): AuthOutput!
  initialConfiguration(input: InitialConfigurationInput!): Boolean!
  addUser(username: String!): Boolean!
  saveConfiguration(input: SaveConfigurationInput!): Configuration!
  downloadController(git: String!): Boolean!
  createCoreTemplate(input: CreateCoreTemplateInput!): CoreTemplate!
  createNode(input: CreateNodeInput!): ManagedNode!
  approveNodeRequest(input: ApproveNodeRequestInput!, requestId: String!): ManagedNode!
  getMyNodeRequests: [NodeRequest!]!
  submitNodeRequest(input: SubmitNodeRequestInput!): NodeRequest!
  createLifecycle(input: CreateLifecycleInput!): Boolean!
  startLifecycle(nodeId: String!): String!
  provisionNode(nodeId: String!): Boolean!
  testAuth(command: String!, nodeId: String!): String!
  uploadConfiguration(env: [ENV!]!, file: String!, nodeId: String!): String!
}

type Network implements CoreNode {
  name: String!
  id: String!
}

"""Auto Deploy Node"""
type Node implements CoreNode {
  name: String!
  id: String!
  power: NodePower!
}

type NodeAuth {
  username: String!
  password: String!
}

input NodeAuthInput {
  username: String!
  password: String!
}

enum NodeOS {
  UBUNTU
  DEBIAN
}

enum NodePower {
  ON
  OFF
  SUSPENDED
}

type NodeRequest {
  id: ID!
  createdAt: DateTime!
  name: String!
  user: User!
  os: NodeOS!
  purpose: String!
  configurationFile: String
  state: NodeRequestState!
}

enum NodeRequestState {
  SUBMITTED
  APPROVED
  DENIED
}

type Provisioner {
  id: ID!
  createdAt: DateTime!
  active: Boolean!
  name: String!
}

type Query {
  userCheck: UserCheck!
  configuration: Configuration!
  getInitialControllers: [InitialModule!]!
  getIntialProvisioners: [InitialModule!]!
  getSetupCompleted(secret: String!): Boolean!
  controllers: [Controller!]!
  coreTemplates: [CoreTemplate!]!
  hosts: [Host!]!
  libraries: [Library!]!
  libraryItem(id: String!): LibraryItem!
  getAllManagedNodes: [ManagedNode!]!
  managedNodes: [ManagedNode!]!
  nodeRequests: [NodeRequest!]!
  networks: [Network!]!

  """Returns nodes from active controller module"""
  nodes: [Node]!
  testNodeStuff(nodeId: String!): Boolean!
  storages: [Storage!]!
  testConfig(id: String!): Boolean!
}

input SaveConfigurationInput {
  controllerHost: String!
}

type Storage implements CoreNode {
  name: String!
  id: String!
}

input SubmitNodeRequestInput {
  name: String!
  os: NodeOS!
  purpose: String!
  configurationFile: String
  env: [ENV!]
}

type User {
  id: ID!
  createdAt: DateTime!
  username: String!
}

type UserCheck {
  isAuthed: Boolean!
  role: [UserRole!]!
}

enum UserRole {
  GUEST
  USER
  ADMIN
}
